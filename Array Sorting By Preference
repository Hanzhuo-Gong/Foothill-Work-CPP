#include <iostream>
#include <string>
#include <sstream>
using namespace std;

//class Student prototype
class Student {
private:
   string firstName;
   string lastName;
   long totalPoints;
   static int sortKey;

public:
   static const string DEFAULT_NAME;
   static const int DEFAULT_POINTS = 0;
   static const int MAX_POINTS = 1000;
   static const int SORT_BY_FIRST = 88;
   static const int SORT_BY_LAST = 98;
   static const int SORT_BY_POINTS = 108;
   static const int DEFAULT_SORT_KEY = SORT_BY_LAST;

private:
   static bool validString(string testStr);
   static bool validPoints(int testPoints);
   static bool validSortKey(int testNumber);

public:
   Student(string lst = DEFAULT_NAME, string fst = DEFAULT_NAME,
      long pts = DEFAULT_POINTS);

   //accessors and mutators
   string getLastName() { return lastName; }
   string getFirstName() { return firstName; }
   int getTotalPoints() { return totalPoints; }
   static int getSortKey() { return sortKey; }

   bool setLastName(string last);
   bool setFirstName(string first);
   bool setPoints(int points);
   static bool setSortKey(int key);

   static int compareTwoStudents(Student firstStud,
      Student secondStud);
   string toString();
};

//class StudentArrayUtilities prototype
class StudentArrayUtilities {
public:
   static const int MEDIAN_FINDER = 2;
   static const int CHECK_EVEN = 2;
   static string toString(string title, Student data[], int arraySize);
   static void arraySort(Student array[], int arraySize);
   static double getMedianDestructive(Student array[], int arraySize);

private:
   static bool floatLargestToTop(Student data[], int top);
   static void mySwap(Student &a, Student &b);
};

//static initialization
const string Student::DEFAULT_NAME = "zz-error";
int Student::sortKey = Student::DEFAULT_SORT_KEY;

int main() {
   Student myClass[] = {
      Student("smith","fred", 95),  Student("bauer","jack",123),
      Student("jacobs","carrie", 195),  Student("renquist","abe",148),
      Student("3ackson","trevor", 108),  Student("perry","fred",225),
      Student("loceff","fred", 44),  Student("stollings","pamela",452),
      Student("charters","rodney", 295),  Student("cassar","john",321),
      Student("white", "bob", 85),  Student("garcia", "mary", 160),
      Student("edogawa", "conan", 323),  Student("ling", "yun", 142),
      Student("brown", "robert", 227)
   };

   Student mySecClass[] = {
      Student("smith","fred", 95),  Student("bauer","jack",123),
      Student("jacobs","carrie", 195),  Student("renquist","abe",148),
      Student("3ackson","trevor", 108),  Student("perry","fred",225),
      Student("loceff","fred", 44),  Student("stollings","pamela",452),
      Student("charters","rodney", 295),  Student("cassar","john",321),
      Student("white", "bob", 85),  Student("garcia", "mary", 160),
      Student("edogawa", "conan", 323),  Student("ling", "yun", 142),
      Student("brown", "robert", 227),  Student("anderson", "tom", 98)
   };

   Student myThirdClass[] = {
      Student("anderson", "tom", 98)
   };

   int arraySize = sizeof(myClass) / sizeof(myClass[0]);
   //Default sorting
   cout << StudentArrayUtilities::toString("Before: ",
      myClass, arraySize) << endl;
   StudentArrayUtilities::arraySort(myClass, arraySize);
   cout << StudentArrayUtilities::toString("After default sort: ",
      myClass, arraySize) << endl;

   //Sort by first name
   Student::setSortKey(Student::SORT_BY_FIRST);
   StudentArrayUtilities::arraySort(myClass, arraySize);
   cout << StudentArrayUtilities::toString("After sort by first: ",
      myClass, arraySize) << endl;

   //Sort by points
   Student::setSortKey(Student::SORT_BY_POINTS);
   StudentArrayUtilities::arraySort(myClass, arraySize);
   cout << StudentArrayUtilities::toString("After sort by points: ",
      myClass, arraySize) << endl;

   //Find median for odd, first set sort key to first name
   Student::setSortKey(Student::SORT_BY_FIRST);
   cout << "Median of even class: " << StudentArrayUtilities::
      getMedianDestructive(myClass, arraySize) << endl;

   //Check preserved sort key
   if (Student::getSortKey() != Student::SORT_BY_FIRST)
      cout << "Fail to preserved sort key." << endl;
   else
      cout << "Successfully preserved sort key." << endl;

   //Find median for even
   arraySize = sizeof(mySecClass) / sizeof(mySecClass[0]);
   cout << "Median of odd class: " << StudentArrayUtilities::
      getMedianDestructive(mySecClass, arraySize) << endl;

   //Find the median for one array
   arraySize = sizeof(myThirdClass) / sizeof(myThirdClass[0]);
   cout << "Median of small class: " << StudentArrayUtilities::
      getMedianDestructive(myThirdClass, arraySize) << endl;
}

//constructor
Student::Student(string last, string first, long points) {
   if (!setLastName(last))
      lastName = DEFAULT_NAME;
   if (!setFirstName(first))
      firstName = DEFAULT_NAME;
   if (!setPoints(points))
      totalPoints = DEFAULT_POINTS;
}

//Mutators
bool Student::setLastName(string last) {
   if (!validString(last))
      return false;
   lastName = last;
   return true;
}

bool Student::setFirstName(string first) {
   if (!validString(first))
      return false;
   firstName = first;
   return true;
}

bool Student::setPoints(int points) {
   if (!validPoints(points))
      return false;
   totalPoints = points;
   return true;
}

bool Student::setSortKey(int key) {
   if (!validSortKey(key))
      return false;
   sortKey = key;
   return true;
}

//Comparison
int Student::compareTwoStudents(Student firstStud,
   Student secondStud) {
   int result, number;

   number = sortKey;
   switch (number) {
   case SORT_BY_LAST:
      result = firstStud.lastName.compare(secondStud.lastName);
      break;
   case SORT_BY_FIRST:
      result = firstStud.firstName.compare(secondStud.firstName);
      break;
   case SORT_BY_POINTS:
      result = firstStud.totalPoints - secondStud.totalPoints;
      break;
   default:
      result = -1;
   }
   return result;
}

//combine string
string Student::toString() {
   string resultString;
   ostringstream cnvrtFirst, cnvrtLast, cnvrtPoints;

   cnvrtFirst << firstName;
   cnvrtLast << lastName;
   cnvrtPoints << totalPoints;

   resultString = " " + cnvrtLast.str() + ", " + cnvrtFirst.str() +
      " points: " + cnvrtPoints.str() + "\n";
   return resultString;
}

//Test for validation
bool Student::validString(string testStr) {
   if (testStr.length() > 0 && isalpha(testStr[0]))
      return true;
   return false;
}

bool Student::validPoints(int testPoints) {
   if (testPoints >= 0 && testPoints <= MAX_POINTS)
      return true;
   return false;
}

bool Student::validSortKey(int testNumber) {
   if (testNumber == SORT_BY_FIRST || testNumber == SORT_BY_LAST ||
      testNumber == SORT_BY_POINTS)
      return true;
   return false;
}

//Return a string to client
string StudentArrayUtilities::toString(string title, Student data[],
   int arraySize)
{
   string output = title + "\n";

   for (int k = 0; k < arraySize; k++)
      output += " " + data[k].toString();
   return output;
}

//Sorting array
void StudentArrayUtilities::arraySort(Student array[], int arraySize) {
   for (int k = 0; k < arraySize; k++)
      if (!floatLargestToTop(array, arraySize - 1 - k))
         return;
}

//Float largest to the top
bool StudentArrayUtilities::floatLargestToTop(Student data[], int top) {
   bool changed = false;

   for (int k = 0; k < top; k++)
      if (Student::compareTwoStudents(data[k], data[k + 1]) > 0) {
         mySwap(data[k], data[k + 1]);
         changed = true;
      }
   return changed;
}

//Method to swap the position
void StudentArrayUtilities::mySwap(Student &a, Student &b) {
   Student temp("", "", 0);

   temp = a;
   a = b;
   b = temp;
}

//Method to find the median
double StudentArrayUtilities::getMedianDestructive(Student array[],
   int arraySize) {
   int firstNum, secondNum, clientSortKey;
   double average;

   clientSortKey = Student::getSortKey();
   Student::setSortKey(Student::SORT_BY_POINTS);
   arraySort(array, arraySize);
   if (arraySize % CHECK_EVEN == 0) {
      firstNum = array[arraySize / MEDIAN_FINDER].getTotalPoints();
      secondNum = array[(arraySize / MEDIAN_FINDER) - 1].getTotalPoints();
      average = (double)(firstNum + secondNum) / MEDIAN_FINDER;
   }
   else
      average = (double)array[arraySize / MEDIAN_FINDER].getTotalPoints();
   Student::setSortKey(clientSortKey);
   return average;
}

/*--------------------Output-----------------------------
Before:
smith, fred points: 95
bauer, jack points: 123
jacobs, carrie points: 195
renquist, abe points: 148
zz-error, trevor points: 108
perry, fred points: 225
loceff, fred points: 44
stollings, pamela points: 452
charters, rodney points: 295
cassar, john points: 321
white, bob points: 85
garcia, mary points: 160
edogawa, conan points: 323
ling, yun points: 142
brown, robert points: 227

After default sort:
bauer, jack points: 123
brown, robert points: 227
cassar, john points: 321
charters, rodney points: 295
edogawa, conan points: 323
garcia, mary points: 160
jacobs, carrie points: 195
ling, yun points: 142
loceff, fred points: 44
perry, fred points: 225
renquist, abe points: 148
smith, fred points: 95
stollings, pamela points: 452
white, bob points: 85
zz-error, trevor points: 108

After sort by first:
renquist, abe points: 148
white, bob points: 85
jacobs, carrie points: 195
edogawa, conan points: 323
loceff, fred points: 44
perry, fred points: 225
smith, fred points: 95
bauer, jack points: 123
cassar, john points: 321
garcia, mary points: 160
stollings, pamela points: 452
brown, robert points: 227
charters, rodney points: 295
zz-error, trevor points: 108
ling, yun points: 142

After sort by points:
loceff, fred points: 44
white, bob points: 85
smith, fred points: 95
zz-error, trevor points: 108
bauer, jack points: 123
ling, yun points: 142
renquist, abe points: 148
garcia, mary points: 160
jacobs, carrie points: 195
perry, fred points: 225
brown, robert points: 227
charters, rodney points: 295
cassar, john points: 321
edogawa, conan points: 323
stollings, pamela points: 452

Median of even class: 160
Successfully preserved sort key.
Median of odd class: 154
Median of small class: 98
Press any key to continue . . .
--------------------------------------------------------*/
